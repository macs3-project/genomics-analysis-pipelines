"""
Bulk ChIP-seq analysis pipeline.
"""

configfile: "config.yaml"

import yaml
import sys
import os

# output directory
OUT_DIR = config["outprefix"] + "_Result"

# file prefix
tfiles = config["tfileprefix"]
cfiles = config["cfileprefix"]

# number of replicates for sample1 and sample2 conditions

## treat
n_t = len( tfiles )		# number of replicates in treatment
tnames = [ "%s_r%d" % (config["outprefix"],x) for x in range( 1, n_t + 1 ) ]

## control
n_c = len( cfiles )		# number of replicates in control
cnames = [ "control_r%d" % (x) for x in range( 1, n_c + 1 ) ]

# make a dictionary to match name to actual raw file prefix
t_dict_list = list( zip( tnames, tfiles ) )

sample_dict = dict( t_dict_list )

c_dict_list = list( zip( cnames, cfiles ) )

sample_dict.update( dict( c_dict_list ) )

# make links

if not os.path.exists( OUT_DIR ):
    os.mkdir( OUT_DIR )

if not os.path.exists( OUT_DIR + "/Raw" ):
    os.mkdir( OUT_DIR + "/Raw" )

if config["options"]["paired"] == "N":
    for p in sample_dict:
       src = os.path.abspath(config["fastqdir"]) + "/" + sample_dict[ p ] +".fastq.gz"
       tgt = OUT_DIR + "/Raw/" + p +".fastq.gz"
       if not os.path.exists( tgt ):
           os.symlink( src, tgt )
       else:
           if os.path.realpath(src) != os.path.realpath(tgt):
               os.remove( tgt )
elif config["options"]["paired"] == "Y":
    for p in sample_dict:
        src = os.path.abspath(config["fastqdir"]) + "/" + sample_dict[ p ] +"_R1.fastq.gz"
        tgt = OUT_DIR + "/Raw/" + p + "_R1.fastq.gz"
        if not os.path.exists( tgt ):
            os.symlink( src, tgt )
        else:
            if os.path.realpath(src) != os.path.realpath(tgt):
                os.remove( tgt )
        src = os.path.abspath(config["fastqdir"]) + "/" + sample_dict[ p ] +"_R2.fastq.gz"
        tgt = OUT_DIR + "/Raw/" + p + "_R2.fastq.gz"
        if not os.path.exists( tgt ):
            os.symlink( src, tgt )
        else:
            if os.path.realpath(src) != os.path.realpath(tgt):
                os.remove( tgt )
else:
    raise Exception("wrong paired assignment!")
    sys.exit(1)

# decide the report Rmd file and macs3 code by the species setting
if config['options']['species'] == 'hg19': 
    REPORTRMD = 'Template_hg19.Rmd'
    species_macs3_code = 'hs'
elif config['options']['species'] == 'hg38':
    REPORTRMD = 'Template_hg38.Rmd'
    species_macs3_code = 'hs'
elif config['options']['species'] == 'mm10':
    REPORTRMD = 'Template_mm10.Rmd'
    species_macs3_code = 'mm'
elif config['options']['species'] == 'mm39':
    REPORTRMD = 'Template_mm39.Rmd'
    species_macs3_code = 'mm'
elif config['options']['species'] == 'sacCer3':
    DARRMD = 'Template_sacCer3.Rmd'
    species_macs3_code = '12000000'
else:
    raise Exception("species %s not supported!" % (config['options']['species']) )

# individual sample
PEAKS   = expand("%s/Analysis/{sample}_peaks.narrowPeak" % (OUT_DIR), sample=tnames)
BIGWIG_PILEUP_T = expand("%s/Analysis/{sample}_pileup.bw" % (OUT_DIR), sample=tnames)
BIGWIG_PILEUP_C = expand("%s/Analysis/{sample}_pileup.bw" % (OUT_DIR), sample=cnames)
BIGWIG_RAW   = expand("%s/Analysis/{sample}_t_raw.bw" % (OUT_DIR), sample=tnames)
BIGWIG_LOGFC   = expand("%s/Analysis/{sample}_logfc.bw" % (OUT_DIR), sample=tnames)
BIGWIG_PSCORE   = expand("%s/Analysis/{sample}_pscore.bw" % (OUT_DIR), sample=tnames)
BIGWIG_SPMR   = expand("%s/Analysis/{sample}_t_spmr.bw" % (OUT_DIR), sample=tnames)
SEQ_STAT_T = expand("%s/QC/{sample}.stat.txt" % (OUT_DIR), sample=tnames)
SEQ_STAT_C = expand("%s/QC/{sample}.stat.txt" % (OUT_DIR), sample=cnames)
PEAK_STAT= expand("%s/QC/{sample}.peakstat.txt" % (OUT_DIR), sample=tnames)
PEAK_ANNO= expand("%s/Analysis/{sample}_peaks.narrowPeak_chip_annotation.pdf" % (OUT_DIR), sample=tnames)
PEAK_GIGGLE= expand("%s/Analysis/{sample}_peaks.narrowPeak_giggle_cistrome.pdf" % (OUT_DIR), sample=tnames)
#PEAK_MOTIF= expand("%s/Analysis/{sample}_HOMER.tar.gz" % (OUT_DIR), sample=tnames)
#BIN_COUNT = expand("%s/Analysis/{sample}.bincount.txt" % (OUT_DIR), sample=tnames)

# combined files
PEAK_STAT.append("%s/QC/%s.peakstat.txt" % (OUT_DIR, config["outprefix"]))
BIGWIG_RAW.append("%s/Analysis/%s_t_raw.bw" % (OUT_DIR, config["outprefix"]))
BIGWIG_LOGFC.append("%s/Analysis/%s_logfc.bw" % (OUT_DIR, config["outprefix"]))
BIGWIG_PSCORE.append("%s/Analysis/%s_pscore.bw" % (OUT_DIR, config["outprefix"]))
BIGWIG_SPMR.append("%s/Analysis/%s_t_spmr.bw" % (OUT_DIR, config["outprefix"]))

SEQ_QC_SUMMARY = "%s/QC/%s.seqqc.stat.summary.txt" % (OUT_DIR, config["outprefix"])
PEAK_QC_SUMMARY = "%s/QC/%s.peakqc.stat.summary.txt" % (OUT_DIR, config["outprefix"])
BIGWIG_COR_SUMMARY = "%s/QC/%s.bigwig.cor.summary.txt" % (OUT_DIR, config["outprefix"])
GSSMAT = "%s/Analysis/%s.gss.mat.gz" % (OUT_DIR, config["outprefix"])
GSSHEATMAP = "%s/Analysis/%s.gss.heatmap.png" % (OUT_DIR, config["outprefix"])
GSSPROFILE = "%s/Analysis/%s.gss.profile.png" % (OUT_DIR, config["outprefix"])

COMBINED_PEAKS = "%s/Analysis/%s_peaks.narrowPeak" % (OUT_DIR, config["outprefix"])
COMBINED_BIGWIG_RAW   = "%s/Analysis/%s_t_raw.bw" % (OUT_DIR, config["outprefix"])
COMBINED_BIGWIG_LOGFC   = "%s/Analysis/%s_logfc.bw" % (OUT_DIR, config["outprefix"])
COMBINED_BIGWIG_PSCORE   = "%s/Analysis/%s_pscore.bw" % (OUT_DIR, config["outprefix"])
COMBINED_BIGWIG_SPMR   = "%s/Analysis/%s_t_spmr.bw" % (OUT_DIR, config["outprefix"] )
COMBINED_PEAK_ANNO= "%s/Analysis/%s_peaks.narrowPeak_chip_annotation.pdf" % (OUT_DIR, config["outprefix"])
COMBIEND_PEAK_GIGGLE= "%s/Analysis/%s_peaks.narrowPeak_giggle_cistrome.pdf" % (OUT_DIR, config["outprefix"])
COMBINED_PEAK_MOTIF= "%s/Analysis/%s_HOMER.tar.gz" % (OUT_DIR, config["outprefix"])

REPORTHTML="%s/Analysis/%s_report.html" % (OUT_DIR, config["outprefix"])

TARGET = []
TARGET.extend(PEAKS + BIGWIG_PILEUP_T + BIGWIG_PILEUP_C + BIGWIG_RAW + BIGWIG_SPMR + BIGWIG_LOGFC + BIGWIG_PSCORE + SEQ_STAT_T + SEQ_STAT_C + PEAK_STAT + PEAK_ANNO + PEAK_GIGGLE + [SEQ_QC_SUMMARY, PEAK_QC_SUMMARY, BIGWIG_COR_SUMMARY, GSSHEATMAP, GSSPROFILE,] + [COMBINED_PEAKS, COMBINED_BIGWIG_RAW, COMBINED_BIGWIG_LOGFC, COMBINED_BIGWIG_PSCORE, COMBINED_BIGWIG_SPMR, COMBINED_PEAK_ANNO, COMBIEND_PEAK_GIGGLE, COMBINED_PEAK_MOTIF, REPORTHTML] )

# decide certain parameters based on config.yaml
mapper = config["options"]["mapper"]
macs3_genome_option = " -g %s " % ( species_macs3_code )
macs3_cutoff_option = " -p " if config["options"]["peakcalling_cutoff_method"] == "pvalue" else " -q "
macs3_cutoff_option += str(config["options"]["peakcalling_cutoff"])
macs3_format_option = " -f BAMPE " if config["options"]["peakcalling_PE_mode"] == "Y" else " -f BAM "
macs3_lambda_option = " --nolambda " if config["options"]["peakcalling_disable_lambda"] == "Y" else " "
macs3_callpeak_option = f"--keep-dup all -B {macs3_genome_option} {macs3_cutoff_option} {macs3_lambda_option} {macs3_format_option}"
macs3_pileup_option = f" {macs3_format_option} "

# decide filtering parameter
if config["options"]["paired"] == "Y":
    bwflag_filter = " -F 3340 -f 3"
else:
    bwflag_filter = " -F 3332"

# one line to rule all

rule all:
    input: TARGET

# ---- all the following rules are common rules for analyzing a single dataset ---
include: "rules/chip_mapping.smk"
include: "rules/chip_cleanbam.smk"
include: "rules/chip_macs.smk"
include: "rules/chip_qc.smk"
include: "rules/chip_annotate.smk"

# ---- integrative analysis of all samples ---

if n_t > 1:
    include: "rules/chip_macs_combined.smk"
else:
    include: "rules/chip_macs_one_replicate.smk"

"""
Bulk ATAC-seq analysis pipeline.
"""

configfile: "config.yaml"

import yaml
import sys
import os

# output directory
OUT_DIR = config["outprefix"] + "_Result"

# file prefix
sample1_files = config["sample1fileprefix"]
sample2_files = config["sample2fileprefix"]

# number of replicates for sample1 and sample2 conditions
n_sample1 = len( sample1_files )
n_sample2 = len( sample2_files )
sample1_names = [ "%s_r%d" % (config["sample1"],x) for x in range( 1, n_sample1 + 1 ) ]
sample2_names = [ "%s_r%d" % (config["sample2"],x) for x in range( 1, n_sample2 + 1 ) ]

# make a dictionary to match name to actual raw file prefix
sample_dict_list = list( zip( sample1_names, sample1_files ) )
sample_dict_list.extend( list( zip( sample2_names, sample2_files ) ) )
sample_dict = dict( sample_dict_list )

# make links
if not os.path.exists( OUT_DIR + "/Raw" ):
    os.mkdir( OUT_DIR + "/Raw" )

for p in sample_dict_list:
    src = config["fastqdir"] + "/" + p[1]+"_R1.fastq.gz"
    tgt = OUT_DIR + "/Raw/" + p[0]+"_R1.fastq.gz"
    if not os.path.exists( tgt ):
        os.symlink( src, tgt )
    else:
        if os.path.realpath(src) != os.path.realpath(tgt):
            os.remove( tgt )
    src = config["fastqdir"] + "/" + p[1]+"_R2.fastq.gz"
    tgt = OUT_DIR + "/Raw/" + p[0]+"_R2.fastq.gz"
    if not os.path.exists( tgt ):
        os.symlink( src, tgt )
    else:
        if os.path.realpath(src) != os.path.realpath(tgt):
            os.remove( tgt )

# individual sample
PEAKS1   = expand("%s/Analysis/{sample}_peaks.narrowPeak" % (OUT_DIR), sample=sample1_names)
PEAKS2   = expand("%s/Analysis/{sample}_peaks.narrowPeak" % (OUT_DIR), sample=sample2_names)
SEQSTAT1 = expand("%s/QC/{sample}.stat.txt" % (OUT_DIR), sample=sample1_names)
SEQSTAT2 = expand("%s/QC/{sample}.stat.txt" % (OUT_DIR), sample=sample2_names)
PEAKSTAT1= expand("%s/QC/{sample}.peakstat.txt" % (OUT_DIR), sample=sample1_names)
PEAKSTAT2= expand("%s/QC/{sample}.peakstat.txt" % (OUT_DIR), sample=sample2_names)
FRAGSTAT1= expand("%s/Alignment/{sample}.sortedByPos.rmdp.clean.unique.bam.insertl.txt" % (OUT_DIR), sample=sample1_names)
FRAGSTAT2= expand("%s/Alignment/{sample}.sortedByPos.rmdp.clean.unique.bam.insertl.txt" % (OUT_DIR), sample=sample2_names)

TARGET = []
TARGET.extend(PEAKS1 + PEAKS2 + SEQSTAT1 + SEQSTAT2 + PEAKSTAT1 + PEAKSTAT2 + FRAGSTAT1 + FRAGSTAT2 )

# decide certain parameters based on config.yaml
mapper = config["options"]["mapper"]
macs3_genome_option = " -g %s " % ( config["options"]["species"] )
macs3_cutoff_option = " -p " if config["options"]["peakcalling_cutoff_method"] == "pvalue" else " -q "
macs3_cutoff_option += str(config["options"]["peakcalling_cutoff"])
macs3_format_option = " -f BAMPE " if config["options"]["peakcalling_PE_mode"] == "Y" else " -f BAM "
macs3_lambda_option = " --nolambda " if config["options"]["peakcalling_disable_lambda"] == "Y" else " "
macs3_option = f"--keep-dup all -B --SPMR {macs3_genome_option} {macs3_cutoff_option} {macs3_lambda_option} {macs3_format_option}"

# one line to rule all

rule all:
    input: TARGET

# ---- all the following rules are common rules for analyzing a single dataset ---
include: "rules/atac_mapping.smk"
include: "rules/atac_macs.smk"
#include: "rules/atac_peak_annotating.smk"
include: "rules/atac_qc.smk"


# ---- integrative analysis of all samples ---

#include: "rules/atac_dar.smk"
#include: "rules/atac_dar_annotating.smk"

